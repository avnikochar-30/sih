import React, { useState } from 'react';
import { Send, Mic, MicOff } from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';

interface ChatMessage {
  id: number;
  message: string;
  timestamp: string;
  isUser: boolean;
}

// Predefined Q&A pairs (Weather + Crop based)
const qaPairs = {
  en: [
    { q: "What is the weather forecast for tomorrow", a: "Tomorrow's forecast shows light rain with a maximum of 30¬∞C." },
    { q: "Is it good to sow rice now", a: "Yes, June‚ÄìJuly monsoon season is ideal for sowing rice in Kerala." },
    { q: "Should I water my coconut trees today", a: "Since rain is expected tomorrow, delay watering to avoid over-saturation." },
    { q: "Best fertilizer for paddy crop", a: "Urea and DAP in the recommended ratio are best for paddy growth." },
    { q: "Can I spray pesticide during rain", a: "Avoid spraying pesticides during rain as it reduces effectiveness." },
    { q: "When should I harvest bananas", a: "Bananas are ready for harvest 8‚Äì10 months after planting when fruits are plump." },
    { q: "How often to irrigate vegetables in summer", a: "Irrigate vegetables every 2‚Äì3 days during peak summer." },
    { q: "Is there a chance of flood next week", a: "Yes, IMD predicts heavy rainfall in central Kerala, be cautious." },
    { q: "What crop can I plant after harvesting rice", a: "Green gram or cowpea are good choices to restore soil nutrients." },
    { q: "Should I protect pepper plants from heavy wind", a: "Yes, provide support sticks to prevent pepper vines from breaking." }
  ],
  ml: [
    { q: "‡¥®‡¥æ‡¥≥‡µÜ ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç?", a: "‡¥®‡¥æ‡¥≥‡µÜ ‡¥ö‡µÜ‡¥±‡¥ø‡¥Ø ‡¥Æ‡¥¥‡¥Ø‡µÅ‡¥Ç ‡¥™‡¥∞‡¥Æ‡¥æ‡¥µ‡¥ß‡¥ø 30¬∞C ‡¥µ‡¥∞‡µÜ‡¥Ø‡µÅ‡¥Ç ‡¥™‡µç‡¥∞‡¥§‡µÄ‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ." },
    { q: "‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç ‡¥®‡¥ü‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥Æ‡µã?", a: "‡¥Ö‡¥§‡µÜ, ‡¥ï‡µá‡¥∞‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥ú‡µÇ‡µ∫‚Äì‡¥ú‡µÇ‡¥≤‡µà ‡¥Æ‡µ∫‡¥∏‡µÇ‡µ∫ ‡¥ï‡¥æ‡¥≤‡¥Ç ‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥®‡¥≤‡µç‡¥≤ ‡¥∏‡¥Æ‡¥Ø‡¥Æ‡¥æ‡¥£‡µç." },
    { q: "‡¥á‡¥®‡µç‡¥®‡µç ‡¥§‡µá‡¥ô‡µç‡¥ô‡¥æ ‡¥Æ‡¥∞‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ï‡µä‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥£‡µã?", a: "‡¥®‡¥æ‡¥≥‡µÜ ‡¥Æ‡¥¥ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µÜ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡¥æ‡µΩ ‡¥á‡¥®‡µç‡¥®‡µç ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ï‡µä‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡¥æ‡¥Ç." },
    { q: "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡¥ø‡¥®‡µç ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥®‡¥≤‡µç‡¥≤ ‡¥µ‡¥≥‡¥Ç ‡¥è‡¥§‡µç?", a: "‡¥Ø‡µÇ‡¥±‡¥ø‡¥Ø‡¥Ø‡µÅ‡¥Ç ‡¥°‡¥ø.‡¥é.‡¥™‡¥ø.‡¥Ø‡µÅ‡¥Ç ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥Ö‡¥®‡µÅ‡¥™‡¥æ‡¥§‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥®‡µΩ‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥â‡¥ö‡¥ø‡¥§‡¥Æ‡¥æ‡¥£‡µç." },
    { q: "‡¥Æ‡¥¥‡¥Ø‡¥ø‡µΩ ‡¥ï‡µÄ‡¥ü‡¥®‡¥æ‡¥∂‡¥ø‡¥®‡¥ø ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡¥Æ‡µã?", a: "‡¥Æ‡¥¥‡¥Ø‡¥ø‡µΩ ‡¥§‡¥≥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥≤‡µÇ‡¥ü‡µÜ ‡¥´‡¥≤‡¥™‡µç‡¥∞‡¥æ‡¥™‡µç‡¥§‡¥ø ‡¥ï‡µÅ‡¥±‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡¥æ‡µΩ ‡¥í‡¥¥‡¥ø‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï." },
    { q: "‡¥µ‡¥æ‡¥¥‡¥™‡µç‡¥™‡¥¥‡¥Ç ‡¥é‡¥™‡µç‡¥™‡µã‡µæ ‡¥ï‡µä‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç?", a: "‡¥µ‡¥æ‡¥¥ 8‚Äì10 ‡¥Æ‡¥æ‡¥∏‡¥Ç ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥æ‡µΩ ‡¥™‡¥¥‡¥ô‡µç‡¥ô‡µæ ‡¥™‡µÅ‡¥∑‡µç‡¥ü‡¥Æ‡¥æ‡¥Ø‡¥™‡µç‡¥™‡µã‡µæ ‡¥ï‡µä‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç." },
    { q: "‡¥ö‡µÇ‡¥ü‡µÅ‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥é‡¥§‡µç‡¥∞ ‡¥¶‡¥ø‡¥µ‡¥∏‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥í‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µΩ ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ï‡µä‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥£‡¥Ç?", a: "‡¥ö‡µÇ‡¥ü‡µÅ‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç 2‚Äì3 ‡¥¶‡¥ø‡¥µ‡¥∏‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥í‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µΩ ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ï‡µä‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï." },
    { q: "‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§ ‡¥Ü‡¥¥‡µç‡¥ö ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥™‡µç‡¥™‡µä‡¥ï‡µç‡¥ï‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡¥æ‡¥ï‡µÅ‡¥Æ‡µã?", a: "‡¥Ö‡¥§‡µÜ, ‡¥ï‡µá‡¥∞‡¥≥‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Æ‡¥ß‡µç‡¥Ø‡¥≠‡¥æ‡¥ó‡¥§‡µç‡¥§‡µç ‡¥∂‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥Ø ‡¥Æ‡¥¥ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Æ‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥µ‡¥ï‡µÅ‡¥™‡µç‡¥™‡µç ‡¥Æ‡µÅ‡¥®‡µç‡¥®‡¥±‡¥ø‡¥Ø‡¥ø‡¥™‡µç‡¥™‡µç ‡¥®‡µΩ‡¥ï‡¥ø." },
    { q: "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç ‡¥ï‡µä‡¥Ø‡µç‡¥Ø‡¥ø‡¥Ø‡¥§‡¥ø‡¥®‡µç ‡¥∂‡µá‡¥∑‡¥Ç ‡¥è‡¥§‡µç ‡¥µ‡¥ø‡¥≥ ‡¥®‡¥ü‡¥æ‡¥Ç?", a: "‡¥ö‡µÜ‡¥±‡µÅ‡¥™‡¥Ø‡µº ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥ï‡µä‡¥ô‡µç‡¥ô‡¥ø‡¥£‡¥ø ‡¥®‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡µã‡¥∑‡¥ï‡¥ó‡µÅ‡¥£‡¥Ç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥®‡¥≤‡µç‡¥≤‡¥§‡¥æ‡¥£‡µç." },
    { q: "‡¥ï‡¥æ‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥ï‡µÅ‡¥∞‡µÅ‡¥Æ‡µÅ‡¥≥‡¥ï‡µç ‡¥ö‡µÜ‡¥ü‡¥ø‡¥ï‡¥≥‡µÜ ‡¥∏‡¥Ç‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥ï‡µç‡¥ï‡¥£‡µã?", a: "‡¥Ö‡¥§‡µÜ, ‡¥µ‡¥≥‡µç‡¥≥‡¥ø‡¥ï‡µæ ‡¥™‡µä‡¥ü‡µç‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥§‡¥ü‡¥Ø‡¥æ‡µª ‡¥§‡µÅ‡¥£‡¥ø‡¥ï‡µã‡¥≤‡µÅ‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï." }
  ]
};

const Chat: React.FC = () => {
  const { t, language } = useLanguage();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isListening, setIsListening] = useState(false);

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now(),
      message: newMessage,
      timestamp: new Date().toLocaleTimeString(),
      isUser: true
    };

    // Find matching answer
    const pair = qaPairs[language].find(
      qa => qa.q.toLowerCase() === newMessage.toLowerCase()
    );

    const botResponse: ChatMessage = {
      id: Date.now() + 1,
      message: pair ? pair.a : (language === "en" ? "Sorry, I only answer weather and crop-related questions." : "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥û‡¥æ‡µª ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥Ø‡µÅ‡¥Ç ‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µç‡¥ü ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µÅ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥®‡µΩ‡¥ï‡µÇ."),
      timestamp: new Date().toLocaleTimeString(),
      isUser: false
    };

    setMessages(prev => [...prev, userMessage, botResponse]);
    setNewMessage('');
  };

  const toggleListening = () => {
    setIsListening(!isListening);
    if (!isListening) {
      setTimeout(() => {
        setNewMessage(language === 'en' ? "What is the weather forecast for tomorrow?" : "‡¥®‡¥æ‡¥≥‡µÜ ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç ‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç?");
        setIsListening(false);
      }, 2000);
    }
  };

  return (
    <div className="flex flex-col h-screen pb-20 lg:pb-4">
      <div className="p-4 bg-white border-b">
        <h1 className="text-xl font-bold text-green-600">{t('chat')}</h1>
        <p className="text-sm text-gray-600">Ask only weather or crop-based questions</p>
      </div>

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((msg) => (
          <div key={msg.id} className={`flex ${msg.isUser ? 'justify-end' : 'justify-start'}`}>
            <div
              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                msg.isUser
                  ? 'bg-green-600 text-white rounded-br-none'
                  : 'bg-gray-100 text-gray-800 rounded-bl-none'
              }`}
            >
              <p className="text-sm">{msg.message}</p>
              <p className="text-xs opacity-75 mt-1">{msg.timestamp}</p>
            </div>
          </div>
        ))}
      </div>

      <div className="p-4 bg-white border-t">
        <div className="flex items-center gap-2">
          <div className="flex-1 relative">
            <input
              type="text"
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              placeholder={language === 'en' ? 'Ask about weather or crops...' : '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•‡¥Ø‡µã ‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡µã ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï...'}
              className="w-full p-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            />
            <button
              onClick={toggleListening}
              className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-colors ${
                isListening 
                  ? 'bg-red-500 text-white animate-pulse' 
                  : 'text-gray-400 hover:text-green-600'
              }`}
            >
              {isListening ? <MicOff size={16} /> : <Mic size={16} />}
            </button>
          </div>
          <button
            onClick={handleSendMessage}
            disabled={!newMessage.trim()}
            className="p-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <Send size={16} />
          </button>
        </div>
        {isListening && (
          <p className="text-xs text-red-600 mt-2 animate-pulse">
            üî¥ Listening... Speak now
          </p>
        )}
      </div>
    </div>
  );
};

export default Chat;
